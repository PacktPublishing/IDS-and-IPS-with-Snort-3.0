Chapter 1

alert tcp any any -> $HOME_NET [80,8080] (msg:”SQL Injection Detected”; flow:established,to_server; http_uri; content:”/wordpress/wp-content/plugins/demo_vul/endpoint.php”; content:”union”; distance:0; http_uri; content:”select”; distance:0; nocase; content:”from”; distance:0; nocase; sid:123;)

This is a rule written to detect and alert on a SQL injection attempt to a web server operating on port 80 or 8080. An example would be the following:
http://acunetix.php.example/wordpress/wp-content/plugins/demo_vul/endpoint.php?user=-1+union+select+1,2,3,4,5,6,7,8,9,(SELECT+user_pass+FROM+wp_users+WHERE+ID=1)


Chapter 4


#Installing Snort 3 on CentOS

sudo dnf install -y epel-release
sudo dnf upgrade -y
sudo reboot now

#Installing build tools
sudo dnf install -y flex bison gcc gcc-c++ make cmake automake autoconf libtool curl pkgconf

#Dependencies
sudo dnf install -y libpcap-devel 

sudo dnf install -y pcre-devel libdnet-devel hwloc-devel openssl-devel zlib-devel luajit-devel libmnl-devel 

#install selectively from the optional set of packages
sudo dnf install -y libmnl-devel unwind-devel xz-devel libuuid-devel hyperscan hyperscan-devel gperftools-devel 

#In order to support NFQ, we will need to install the Netfilter Netlink and Netfilter Queue packages:
sudo dnf install -y libnfnetlink-devel libnetfilter_queue-devel

#Get libdaq
#Download libdaq source from https://www.snort.org/downloads.

cd ~/Snort3
tar -zxf ~/Downloads/libdaq-3.0.13.tar.gz


#Install libdaq
cd ~/Snort3
tar -zxf ~/sources/libdaq-3.0.13.tar.gz

cd libdaq-3.0.13
./bootstrap
./configure

make
sudo make install

#Snort

#Get Snort
#Download Snort source from https://www.snort.org/downloads.

cd ~/Snort3
tar -zxf ~/Downloads/snort3-3.1.75.0.tar.gz

cd ~/Snort3
tar -zxf ~/sources/snort3-3.1.75.0.tar.gz

./configure_cmake.sh

cd build/
sudo make install



###Kali

sudo apt update
sudo apt upgrade

#All the required packages are installed using the apt command, as follows:

sudo apt install build-essential libpcap-dev libpcre3-dev libnet1-dev zlib1g-dev luajit hwloc libdumbnet-dev bison flex liblzma-dev openssl libssl-dev pkg-config libhwloc-dev cmake cpputest libsqlite3-dev uuid-dev libcmocka-dev libnetfilter-queue-dev libmnl-dev autotools-dev libluajit-5.1-dev libunwind-dev

#Make sure /etc/ld.so.conf.d/local.conf contains the below lines without the # (Remove the #)
#/usr/local/lib
#/usr/local/lib64

#Set up dir
mkdir ~/snort-source-files
cd ~/snort-source-files

#Libdaq
git clone https://github.com/snort3/libdaq.git
cd libdaq
./bootstrap
./configure
make
sudo make install

#SNort
cd ~/snort-source-files
git clone https://github.com/snort3/snort3.git

cd snort3
 ./configure_cmake.sh
cd build
make
sudo make install


Chapter 5

#Snort is run with a single command-line parameter, namely -V, which prints out the Snort version. 
snort -V

#You may have to run this command using sudo
sudo snort -c /usr/local/etc/snort/snort.lua -R /usr/local/etc/rules/local.rules -i ens3 -A alert_fast -s 65535 -k none

#
snort -c snort.lua --daq pcap -r ~/Downloads/PCAPS/http.cap 

#The use of –tweaks, which may be used to layer the configuration.
snort -c snort.lua –tweaks security --daq pcap -r ~/Downloads/PCAPS/http.cap 

#Running Snort with just the -c command-line argument tells Snort to validate the specified configuration and exit:
snort -c /usr/local/etc/snort/snort.lua

#In addition to the configuration, we may also validate a rules file by using the -R command-line option:
snort -c /usr/local/etc/snort/snort.lua -R /usr/local/etc/rules/local.rules



Chapter 6

#The configuration options for the daq module can be listed using the help command available with Snort, as follows:

snort3 --help-module daq

#The –daq-list option lists out all the DAQs that are available for use. This list depends on the various DAQ modules included during build time:

snort --daq-list



#If we want to modify one of the variables relevant to the DAQ, we can use the command-line option, --daq-var <name=value> , to do that. In the following example, we can see how the debug variable for the afpacket DAQ module is modified:

sudo ./snort -c ../../lua/snort.lua -R ~/snort-source-files/snort3-community-rules/snort3-community.rules -i eth0 -A alert_fast -k none --daq afpacket --daq-var debug=true


Chapter 7


Chapter 8

#using the –-show-plugins command-line option of Snort to list the available inspectors:

./build/src/snort --show-plugins


#Using the –-help-module command (shown here with the dns module as an example):

./build/src/snort --help-module dns


Chapter 9

#using the help command available with Snort to list the configuration options for each module 

snort3 --help-module stream_ip

alert tcp any any -> any any (msg:"Request to /index.html detected - Test"; flow:established; http_method; content:"GET"; http_uri; content:"|2F|index"; sid:123; priority:3;)

pcap missing

Chapter 10

pcap in downloads

#The configuration options for each module can be listed using the help command available with Snort. 

snort3 --help-module http_inspect

#The command for http2_inspect would be as follows:

snort3 --help-module http2_inspect



Chapter 11

Witness-DCERPC.pcap

#The snort signature that will detect DCERPC traffic that uses the Witness interface (UUID ccd8c074-d0e5-4a40-92b4-d074faa6ba28): 

alert tcp any any -> any any (msg:"DCERPC Witness Interface"; flow:established; dce_iface: uuid ccd8c074-d0e5-4a40-92b4-d074faa6ba28; sid:2344; priority:3;)

#The snort command as follows: 
./build/src/snort -c lua/snort.lua -R ~/Rules/local.rules -r ~/dcerpc_witness.pcapng -k none -l ~/Log



Chapter 12

#The IP reputation inspector can generate the following alerts, as shown by the --help-module command:

../build/src/snort --help-module reputation


Experiment:

#In order to enable the feature, the following configuration needs to be included in the Snort configuration file. The file_id parameter specifies the location of the magic file:

file_id = { rules_file = 'file_magic.rules' }
file_policy = { }

#The file_magic file includes rules such as the following that identify particular files. Each of these rules should use a unique id (the id value is 100 for this rule):

file_id (msg:"PDF File Detected"; file_data; content:"%PDF-"; depth:5; offset:0; file_meta:type PDF, id 100, category “PDF file”; gid:4; sid:123;)

#The result of this identification is used for further analysis. In this rule, when the rule triggers for a particular session, Snort also marks the file as a PDF (using the file_meta rule option). There is another rule option called file_type. The file_type rule option checks if the identified file is a particular type:

alert file (msg:” PDF File Inbound”; file_type: PDF; content:”|2F|Type|20|EmbeddedFile”; sid:234; )


Chapter 14

#snort rule
alert http any any -> any any (msg:"Download HTML Rule"; flow:established,to_server; http_uri; content:"|2F|download|2E|html"; http_header; content:"Host|3A 20|www|2E|ethereal|2E|com"; content:"User|2D|Agent|3A 20|Mozilla",distance 0; sid:123459991;)

#pcap
http.pcap

snort3 -c snort.lua -l ~/Downloads/log/ -R ~/Downloads/Snort3/rules/local.rules --daq dump -Q -r ~/Downloads/PCAPS/http.cap

#u2spewfoo command
~/Downloads/snort3/build/tools/u2spewfoo/u2spewfoo ~/Downloads/log/unified2.log 



Chapter 15

#command

snort –-help-module appid


#Rule
alert tcp any any -> any any (msg:”Kismet Traffic”; appids:”kismet”; sid:12345; )

snort -c ~/snort-source-files/snort3/lua/snort.lua -r ~/Downloads/kismet-client-server-dump-1.pcap -R ~/Rules/local.rules -k none -l ~/Log


Chapter 16

#Snort2lua command

./snort2lua -c snort2rules.rules -r snort3rules.rules


#Snort2lua migrating config command

./snort2lua -c  snort.conf -o snort3.lua


